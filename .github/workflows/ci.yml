name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.3"
  PACKAGE_NAME: "virtual_knitting_machine"

jobs:
  # ===========================================================================
  # PRE-COMMIT QUALITY CHECKS
  # ===========================================================================
  # Run all pre-commit hooks to ensure code quality
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5  # Updated from v4 to v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4         # Updated from v3 to v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run pre-commit hooks
        run: poetry run pre-commit run --all-files

  test:
    name: "Tests: Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: "🔥 Check out code"
        uses: actions/checkout@v4

      - name: "🐍 Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Force refresh PATH and verify Python installation on Windows
      - name: "🔍 Verify Python installation (Windows)"
        if: runner.os == 'Windows'
        run: |
          refreshenv
          python --version
          where python
          python -c "import sys; print(sys.executable)"
          python -c "import sys; print(sys.prefix)"
        shell: cmd

      - name: "📦 Install Poetry (Unix)"
        if: runner.os != 'Windows'
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: "📦 Install Poetry (Windows)"
        if: runner.os == 'Windows'
        run: |
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
          $poetryPath = "$env:APPDATA\Python\Scripts"
          echo "$poetryPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH = "$poetryPath;$env:PATH"
          & "$poetryPath\poetry.exe" config virtualenvs.create true
          & "$poetryPath\poetry.exe" config virtualenvs.in-project true
          & "$poetryPath\poetry.exe" config virtualenvs.prefer-active-python true
        shell: powershell

      - name: "🔍 Verify Poetry installation"
        run: |
          poetry --version
          python --version
          echo "Running on: ${{ runner.os }} with Python ${{ matrix.python-version }}"

      - name: "💾 Load cached dependencies"
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Add explicit Python path configuration for Windows
      - name: "🛠️ Configure Poetry Python path (Windows)"
        if: runner.os == 'Windows'
        run: |
          $pythonPath = (Get-Command python).Source
          Write-Output "Python executable path: $pythonPath"
          poetry env use $pythonPath
        shell: powershell

      - name: "📋 Install dependencies"
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: "🔧 Install project"
        run: poetry install --no-interaction

      - name: "🧪 Run tests with coverage (Python ${{ matrix.python-version }} on ${{ matrix.os }})"
        run: |
          echo "::notice title=Test Environment::Running tests on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
          poetry run coverage run -m unittest discover tests -v
          poetry run coverage report

      - name: "📤 Upload test results on failure"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-failure-logs-python${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            .coverage
            **/*.log

  # Summary job that depends on all test matrix combinations
  test-summary:
    name: "📋 Test Results Summary"
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: "📊 Check test matrix results"
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| OS | Python 3.11 | Python 3.12 | Python 3.13 |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|---|" >> $GITHUB_STEP_SUMMARY
          echo "| Ubuntu | ${{ needs.test.result }} | ${{ needs.test.result }} | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows | ${{ needs.test.result }} | ${{ needs.test.result }} | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| macOS | ${{ needs.test.result }} | ${{ needs.test.result }} | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY

          echo "Test matrix completion status:"
          echo "Result: ${{ needs.test.result }}"

          if [[ "${{ needs.test.result }}" == "failure" ]]; then
            echo "❌ Some tests failed in the matrix"
            exit 1
          else
            echo "✅ All tests passed across all Python versions and operating systems"
          fi

  # Optional: Build validation job
  build:
    name: "🔨 Package Building"
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: "🔥 Check out code"
        uses: actions/checkout@v4

      - name: "🐍 Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: "📦 Install Poetry"
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: "🔨 Build package"
        run: poetry build

      - name: "✅ Validate package"
        run: |
          poetry run pip install twine
          poetry run twine check dist/*

      - name: "📤 Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: python-package-dist
          path: dist/
